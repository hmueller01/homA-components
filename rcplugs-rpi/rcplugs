#!/usr/bin/env python2
# -*- coding: utf-8
# $Id$
# rcPlugs is a MQTT RC-Switch bridge used by HomA framework.
# HomA framework needs to be configured before use. See "setup.py".
# Holger Mueller
# 2017/03/07 - 2017/03/09 initial revision
# 2017/04/06 modified to be complient with issue #144 and sockets component
# 2017/10/18 made control name (before fix "Power") configurable

import sys
import time
import getopt
import paho.mqtt.client as mqtt
import mqtt_config		# defines host, port, user, pwd, ca_certs
import ssl
from subprocess import call
import setup

# config here ...
debug = False
systemId = setup.systemId # "123456-rcplugs"
rcswitch_cmd = "/usr/local/bin/rfsend"

plug_arr = [] # buffer of registered plugs


def build_topic(systemCode, unitCode, t1 = None, t2 = None, t3 = None):
	"Create topic string."
	topic = "/devices/%s-%s-%s" % (systemId, systemCode, unitCode)
	if t1:
		topic += "/"+ t1
	if t2:
		topic += "/"+ t2
	if t3:
		topic += "/"+ t3
	if debug: print("build_topic(): '"+ topic+ "'")
	return topic

def getPlug(systemCode, unitCode):
	for plug_dict in plug_arr:
		if plug_dict['systemCode'] == systemCode and plug_dict['unitCode'] == unitCode:
			if debug: print("getPlug(): Plug systemCode: %s, unitCode: %s found." % (systemCode, unitCode))
			return plug_dict
	if debug: print("getPlug(): Plug systemCode: %s, unitCode: %s NOT found." % (systemCode, unitCode))
	return False

def addPlug(client, systemCode, unitCode, control, type):
	plug_dict = getPlug(systemCode, unitCode)
	if plug_dict == False:
		if debug: print("Plug systemCode: %s, unitCode: %s, control: %s, type: %s added." % (systemCode, unitCode, control, type))
		plug_arr.append({'systemCode': systemCode, 'unitCode': unitCode, 'control': control, 'type': type})
		if debug: print plug_arr
		# subscribe topic "/devices/<systemId>-<systemCode>-<unitCode>/controls/<control>/on"
		# e.g. "/devices/123456-rcplugs-11011-01000/controls/Power/on"
		client.subscribe(build_topic(systemCode, unitCode, "controls", control, "on"))
	else:
		if debug: print("Plug systemCode: %s, unitCode: %s, control: %s, type: %s updated." % (systemCode, unitCode, control, type))
		plug_dict['control'] = control
		plug_dict['type'] = type
		if debug: print plug_arr
	return
 
def removePlug(client, systemCode, unitCode):
	# Topic and array cleanup:  
	# unsubscribe("/devices/<systemId>-<systemCode>-<unitCode>/controls/<control>/on")
	# publish("/devices/<systemId>-<systemCode>-<unitCode>/controls/<control>", "")
	# publish("/devices/<systemId>-<systemCode>-<unitCode>/controls/<control>/on", "")
	plug_dict = getPlug(systemCode, unitCode)
	if plug_dict != False:
		if debug: print("Plug systemCode: %s, unitCode: %s removed." % (systemCode, unitCode))
		client.unsubscribe(build_topic(systemCode, unitCode, "controls", plug_dict['control'], "on"))
		# remove topics
		client.publish(build_topic(systemCode, unitCode, "controls", plug_dict['control'], "on"), "", retain=True)
		client.publish(build_topic(systemCode, unitCode, "controls", plug_dict['control']), "", retain=True)
		plug_arr.remove(plug_dict)
	return

def sendPlug(systemCode, unitCode, mode):
	plug_dict = getPlug(systemCode, unitCode)
	if plug_dict != False:
		if plug_dict['type'] == "typeA":
			ret = call(["sudo", rcswitch_cmd, systemCode, unitCode, mode])
			if ret == 0:
				if debug: print("Plug %s-%s turned %s" % (systemCode, unitCode, 'on' if mode=='1' else 'off'))
				return True
			else:
				print("sendPlug(): Error sending plug %s-%s ret_code: %d." % (systemCode, unitCode, ret))
		elif plug_dict['type'] == "typeB":
			# TODO: add typeB support
			print("sendPlug(): Plug %s-%s typeB not supported yet." % (systemCode, unitCode))
			#call(["sudo", rcswitch_cmd, systemCode, unitCode, mode])
			#if debug: print("Plug %s-%s turned %s" % (systemCode, unitCode, 'on' if mode=='1' else 'off'))
		else:
			print("sendPlug(): Plug %s-%s type '%s' not supported." % (systemCode, unitCode, plug_dict['type']))
	else:
		print("sendPlug(): Plug %s-%s not found." % (systemCode, unitCode))
	return False

# The callback for when the client receives a CONNACK response from the broker.
def on_connect(client, userdata, flags, rc):
	if debug: print("on_connect(): Connected with result code "+ str(rc))

	# Subscribing in on_connect() means that if we lose the connection and
	# reconnect then subscriptions will be renewed.
	# subscribe topic "/sys/<systemId>/<systemCode>-<unitCode>/<control>"
	# e.g. "/sys/123456-rcplugs/11011-01000/Power", payload: typeA
	client.subscribe("/sys/%s/+/+" % systemId)
	return

# The callback for when a PUBLISH message is received from the broker.
def on_message(client, userdata, msg):
	if debug: print("on_message(): "+ msg.topic+ ":"+ str(msg.payload))
	# subscribed topics:
	# /sys/<systemId>/<systemCode>-<unitCode>/<control>, payload: type
	# /devices/<systemId>-<systemCode>-<unitCode>/controls/<control>/on, payload: state
	# e.g.:
	# /sys/123456-rcplug/11011-01000/Power, payload: typeA
	# /devices/123456-rcplug-11011-01000/controls/Power/on, payload: 1
	topic = msg.topic.split("/") # topic[0] is "" (string before first "/")
	topic.remove("") #  remove this first empty topic
	if topic[0] == "sys" and topic[1] == systemId:
		systemCode, unitCode = topic[2].split("-")
		if msg.payload == "":
			removePlug(client, systemCode, unitCode)
		else:
			addPlug(client, systemCode, unitCode, topic[3], msg.payload)
	elif topic[0] == "devices" and topic[2] == "controls" and topic[4] == "on":
		systemId1, systemId2, systemCode, unitCode = topic[1].split("-")
		if systemId1+ "-"+ systemId2 == systemId:
			ret = sendPlug(systemCode, unitCode, msg.payload)
			# echo back state
			if ret:
				client.publish(build_topic(systemCode, unitCode, "controls", topic[3]), msg.payload, retain=True)
			else:
				# turn switch back, if sendPlug() failed
				client.publish(build_topic(systemCode, unitCode, "controls", topic[3]), 0 if msg.payload else 1, retain=True)
		else:
			print("on_message(): Unkown topic '%s'." % msg.topic)
	else:
		print("on_message(): Unkown topic '%s'." % msg.topic)
	return

# The callback for when a message is published to the broker.
def on_publish(client, userdata, mid):
	if debug: print("on_publish(): message send "+ str(mid))
	return

def usage():
	print("Control generic 433Mhz wireless power outlet sockets.")
	print("%s [-h] [--help] [-d] [--brokerHost 127.0.0.1] [--brokerPort 1883]" % sys.argv[0])
	print("-h, --help        Shows this help")
	print("-d                Enable debug output")
	print("--brokerHost      Set MQTT broker host")
	print("--brokerPort      Set MQTT broker port")
	return

def cmd_line_args(argv):
	global debug # use global debug if we set it inside here
	try:
		opts, args = getopt.getopt(argv, "hd", ["help", "brokerHost=", "brokerPort="])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		elif opt == '-d':
			debug = True
			print("Debug output enabled.")
		elif opt in ("--brokerHost"):
			if debug: print("set mqtt_config.host = %s" % arg)
			mqtt_config.host = arg
		elif opt in ("--brokerPort"):
			if debug: print("set mqtt_config.port = %s" % arg)
			mqtt_config.port = arg
	return


# handle arguments on command line
cmd_line_args(sys.argv[1:])

# connect to MQTT broker
mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.on_publish = on_publish
if mqtt_config.ca_certs != "":
	#mqttc.tls_insecure_set(True) # Do not use this "True" in production!
	mqttc.tls_set(mqtt_config.ca_certs, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)
mqttc.username_pw_set(mqtt_config.user, password=mqtt_config.pwd)
if debug: print("Connecting to host '%s', port '%s'" % (mqtt_config.host, mqtt_config.port))
mqttc.connect(mqtt_config.host, port=mqtt_config.port)
mqttc.loop_start()

while True:
	# endless loop
	try:
		time.sleep(1000)
	except (KeyboardInterrupt, SystemExit):
		print '\nKeyboardInterrupt found! Stopping program.'
		break

# wait until all queued topics are published
mqttc.loop_stop()
mqttc.disconnect()
